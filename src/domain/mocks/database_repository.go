// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	domain "github.com/jhonromerou/magneto-brain/src/domain"

	mock "github.com/stretchr/testify/mock"
)

// DatabaseRepository is an autogenerated mock type for the DatabaseRepository type
type DatabaseRepository struct {
	mock.Mock
}

// Fields provides a mock function with given fields: fields
func (_m *DatabaseRepository) Fields(fields string) {
	_m.Called(fields)
}

// Get provides a mock function with given fields:
func (_m *DatabaseRepository) Get() (*dynamodb.ExecuteStatementOutput, error) {
	ret := _m.Called()

	var r0 *dynamodb.ExecuteStatementOutput
	if rf, ok := ret.Get(0).(func() *dynamodb.ExecuteStatementOutput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ExecuteStatementOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields:
func (_m *DatabaseRepository) Query() domain.DatabaseRepository {
	ret := _m.Called()

	var r0 domain.DatabaseRepository
	if rf, ok := ret.Get(0).(func() domain.DatabaseRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.DatabaseRepository)
		}
	}

	return r0
}

// SetTable provides a mock function with given fields: tableName
func (_m *DatabaseRepository) SetTable(tableName string) {
	_m.Called(tableName)
}

// Upsert provides a mock function with given fields: _a0
func (_m *DatabaseRepository) Upsert(_a0 domain.DatabaseInsertOne) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.DatabaseInsertOne) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Where provides a mock function with given fields: finders
func (_m *DatabaseRepository) Where(finders domain.QueryFinders) {
	_m.Called(finders)
}
